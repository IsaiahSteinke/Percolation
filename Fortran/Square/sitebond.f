C     ==================================================================
C     Program: sitebond.f
C     Author: Isaiah Steinke
C
C     Runs a combination site-bond problem for a square lattice.
C     The user must specify the fraction of sites and bonds to fill via
C     variables ps and pb.  The code will first occupy the specified
C     fraction of sites (all of these sites are occupied clusters of
C     size 1).  Then, the bonds with be occupied with the cluster sizes
C     appropriately modified after each bond is occupied.  The code
C     utilizes three arrays:
C        - the site array, s, which lists the cluster the site
C          belongs to
C        - the bond array, b, which lists all the bonds and which
C          cluster the bond belongs to (bonds are denoted by the sites
C          they connect in the first two columns of the array)
C        - the cluster array, c, which lists the cluster size.
C     Note that there is no need for an 'index' for the site/cluster
C     arrays since the row number is essentially the number of the site
C     or cluster.  The order the sites and bonds are occupied is
C     generated by randomly swapping the order of the sites or bonds
C     in the two arrays, sorder and border.
C
C     Output from code:
C        - sbsite.txt: lists the site/cluster number, the contents of
C          the site array, and the contents of the cluster array
C        - sbbond.txt: lists the contents of the bond array
C        - sbdebug.txt: essentially a copy of any messages that appear
C          on screen during execution for debugging.
C
C     Last Revision: July 8, 2010
C     ==================================================================

      program sitebond

      implicit none
      integer m, n, t, cln, pbc, scn, bcn, rc, nb
      integer sseed, bseed, lcn, lcs, oldcn, clsum
      integer maxcn, maxcs, topfill, botfill, perccln, perccls
      integer i, j, k, temp, tsites, tbonds
      integer s(1000000), sorder(1000000), c(1000000), nn(10)
      integer b(3000000,3), border(3000000,2), btemp(2)
      real rand
      double precision ps, pb, f
      external nearestn
      common m, n, t, pbc, nn, scn

      open(unit=10, file='sbsite.txt')
      open(unit=11, file='sbbond.txt')
      open(unit=12, file='sbdebug.txt')

C     dimensions of lattice m x n

         m = 50                   !width
         n = 50                   !height
         t = m*n                  !total number of lattice sites

C     fraction of lattice sites and bonds to fill (user specified)

         ps = 0.50d+00            !fraction of sites to fill
         pb = 0.50d+00            !fraction of bonds to fill

C     random number seeds for generating the order of site and bond
C     occupation (must be integers)

         sseed = 143285
         bseed = 43716

C     toggle for periodic boundary conditions on the left/right sides

         pbc = 0                  !set to 1 if using p.b.c.

C     lattice-specific geometry constants (need to be changed if the
C     lattice is changed)

         scn = 4                  !site coordination number
         bcn = 6                  !bond coordination number

C     calculate the overall total number of bonds possible (depends on
C     lattice geometry

         if (pbc.eq.1) then
            nb = m*(2*n-1)
         else
            nb = (2*m*n)-m-n
         end if

C     initialize arrays to zero for all elements (if the declared array
C     sizes change, you will need to modify the do loops here - the
C     bond array should have 2x the number of rows as the site array to
C     account for the geometry)

         do i=1,1000000
            s(i) = 0              !site array
            c(i) = 0              !cluster array
         end do

         do i=1,10
            nn(i) = 0             !nearest neighbor array
         end do

         do i=1,3000000
            do j=1,3
               b(i,j)=0           !bond array
            end do
         end do

C     initialize constants for checking for the infinite cluster

         maxcn = 0                !number of the largest overall cluster
         maxcs = 0                !size of the largest overall cluster

C     ------------------------------------------------------------------
C     generate the array that lists the order of site occupation
C     ------------------------------------------------------------------

         call srand(sseed)        !seeds the random number generator

C        initialize order array

         do i = 1,t
            sorder(i) = i
         end do

C        permute sites randomly in the order array

         do i = 1,t
            j = i + (t-i+1)*rand(0)
            temp = sorder(i)
            sorder(i) = sorder(j)
            sorder(j) = temp
         end do
C     ------------------------------------------------------------------

C     ------------------------------------------------------------------
C     generate the list of bonds in the bond array and set the
C     occupation equal to zero; initialize the bond order array
C     ------------------------------------------------------------------

         rc = 1                   !row number (counter)

         do i = 1, (t-1)
            call nearestn(i)
            do j = 1, scn
               if (nn(j).gt.i) then
                  b(rc,1) = i
                  b(rc,2) = nn(j)
                  b(rc,3) = 0
                  border(rc,1) = i
                  border(rc,2) = nn(j)
               else
                  goto 210
               end if
               rc = rc + 1
210            continue
            end do
         end do
C     ------------------------------------------------------------------

C     ------------------------------------------------------------------
C     randomize the order in which the bonds are filled in the bond
C     order array
C     ------------------------------------------------------------------

         call srand(bseed)        !seeds the random number generator

C     permute bonds randomly in the bond order array

         do i = 1, nb
            j = i + (nb-i+1)*rand(0)
            btemp(1) = border(i,1)
            btemp(2) = border(i,2)
            border(i,1) = border(j,1)
            border(i,2) = border(j,2)
            border(j,1) = btemp(1)
            border(j,2) = btemp(2)
         end do
C     ------------------------------------------------------------------

C     ==================================================================
C     occupy the specified fraction of sites
C     ==================================================================

         write(6,*) "Specified fraction of sites to fill:", ps
         write(12,*) "Specified fraction of sites to fill:", ps

         tsites = ps*t            !number of sites to occupy
         cln = 1                  !lowest unused cluster number

         do i=1,tsites
            write(6,*) "Site occupied:", sorder(i)
            write(12,*) "Site occupied:", sorder(i)
            s(sorder(i)) = cln    !occupies site
            c(cln) = 1            !all sites occupied are of size 1
            cln = cln+1           !increment the lowest unused cluster number
         end do

         f = real(tsites)/real(t)

         write(6,*) "Actual fraction of sites filled:", f
         write(12,*) "Actual fraction of sites filled:", f
         write(6,*) "--------------------"
         write(12,*) "--------------------"
C     ==================================================================

C     set the maximum cluster size to 1 and arbitrarily set the largest
C     cluster number to be 1

         maxcn = 1
         maxcs = 1

C     ==================================================================
C     occupy bonds and update cluster numbers/sizes appropriately
C     ==================================================================

         write(6,*) "Specified fraction of bonds to fill:", pb
         write(12,*) "Specified fraction of bonds to fill:", pb

         tbonds = pb*nb           !number of bonds to occupy
         lcn = 0                  !temp variable for largest cluster number
         lcs = 0                  !temp variable for largest cluster size

         do i=1,tbonds
            write(6,*) "Bond occupied:", border(i,1), border(i,2)
            write(12,*) "Bond occupied:", border(i,1), border(i,2)
C     check the two sites that the bond connects
            do j=1,nb
               if (b(j,1).eq.border(i,1)) then
                  if (b(j,2).eq.border(i,2)) then
C     Case 1: neither site is occupied, bond becomes its own cluster
                     if (s(b(j,1)).eq.0) then
                        if (s(b(j,2)).eq.0) then
                          write(6,*) "Sites at end of bond unoccupied"
                          write(12,*) "Sites at end of bond unoccupied"
                           b(j,3) = cln
                           c(cln) = 1
                          write(6,*) "Bond belongs to cluster", cln
                          write(12,*) "Bond belongs to cluster", cln
                           cln = cln+1
                           goto 310
                        end if
                     end if
C     Case 2: only one site is occupied, bond is added to cluster of
C     occupied site
                     if (s(b(j,1)).gt.0) then
                        if (s(b(j,2)).eq.0) then
                         write(6,*) "Only site", b(j,1), " is occupied"
                         write(12,*) "Only site", b(j,1), " is occupied"
                           lcn = s(b(j,1))
                           lcs = c(s(b(j,1)))
                           b(j,3) = lcn
                           c(s(b(j,1))) = lcs+1
                         write(6,*) "Bond added to cluster", lcn
                         write(12,*) "Bond added to cluster", lcn
                         write(6,*) "Cluster", lcn, " is now size",
     &                   c(s(b(j,1)))
                         write(12,*) "Cluster", lcn, " is now size",
     &                   c(s(b(j,1)))
                           goto 310
                        end if
                     end if
                     if (s(b(j,1)).eq.0) then
                        if (s(b(j,2)).gt.0) then
                         write(6,*) "Only site", b(j,2), " is occupied"
                         write(12,*) "Only site", b(j,2), " is occupied"
                           lcn = s(b(j,2))
                           lcs = c(s(b(j,2)))
                           b(j,3) = lcn
                           c(s(b(j,2))) = lcs+1
                         write(6,*) "Bond added to cluster", lcn
                         write(12,*) "Bond added to cluster", lcn
                         write(6,*) "Cluster", lcn, " is now size",
     &                   c(s(b(j,2)))
                         write(12,*) "Cluster", lcn, " is now size",
     &                   c(s(b(j,2)))
                           goto 310
                        end if
                     end if
C     Case 3: both sites are occupied; add everything to the larger
C     cluster and zero out the smaller cluster
                     write(6,*) "Both sites occupied"
                     write(12,*) "Both sites occupied"
                     write(6,*) "Site", b(j,1), " belongs to cluster"
     &               , s(b(j,1)), " of size", c(s(b(j,1)))
                     write(6,*) "Site", b(j,2), " belongs to cluster"
     &               , s(b(j,2)), " of size", c(s(b(j,2)))
                     write(12,*) "Site", b(j,1), " belongs to cluster"
     &               , s(b(j,1)), " of size", c(s(b(j,1)))
                     write(12,*) "Site", b(j,2), " belongs to cluster"
     &               , s(b(j,2)), " of size", c(s(b(j,2)))
C        this loop checks to see if both sites are already part of the
C        same cluster
                     if (s(b(j,1)).eq.s(b(j,2))) then
                       write(6,*) "Sites belong to same cluster"
                       write(12,*) "Sites belong to same cluster"
                        lcn = s(b(j,1))
                        lcs = c(s(b(j,1)))
                        b(j,3) = lcn
                        c(s(b(j,1))) = lcs+1
                       write(6,*) "Cluster", lcn, " is now size",
     &                 c(s(b(j,1)))
                       write(12,*) "Cluster", lcn, " is now size",
     &                 c(s(b(j,1)))
                        goto 310
                     end if
C        this loop is for sites belonging to different clusters
                     if (c(s(b(j,1))).gt.c(s(b(j,2)))) then
                       write(6,*) "Site", b(j,1),
     &                 " belongs to a larger cluster"
                       write(12,*) "Site", b(j,1),
     &                 " belongs to a larger cluster"
                        lcn = s(b(j,1))
                        oldcn = s(b(j,2))
                        lcs = c(s(b(j,1)))
                        b(j,3) = lcn
                        clsum = lcs+c(oldcn)+1
                        do k=1,t
                           if (s(k).eq.oldcn) then
                              s(k) = lcn
                            write(6,*) "Site", k, " is now in cluster"
     &                      , lcn
                            write(12,*) "Site", k, " is now in cluster"
     &                      , lcn
                           end if
                        end do
                        do k=1,nb
                           if (b(k,3).eq.oldcn) then
                              b(k,3) = lcn
                           write(6,*) "Bond", b(k,1), b(k,2),
     &                     " is now in cluster", lcn
                           write(12,*) "Bond", b(k,1), b(k,2),
     &                     " is now in cluster", lcn
                           end if
                        end do
                        c(oldcn) = 0
                        c(s(b(j,1))) = clsum
                       write(6,*) "Bond added to cluster", lcn
                       write(12,*) "Bond added to cluster", lcn
                       write(6,*) "Cluster", lcn, " is now size",
     &                 c(s(b(j,1)))
                       write(12,*) "Cluster", lcn, " is now size",
     &                 c(s(b(j,1)))
                       write(6,*) "Cluster", oldcn, " is now size",
     &                 c(oldcn)
                       write(12,*) "Cluster", oldcn, " is now size",
     &                 c(oldcn)
                        goto 310
                     else
                       write(6,*) "Site", b(j,2),
     &                 " belongs to a larger or equal-sized cluster"
                       write(12,*) "Site", b(j,2),
     &                 " belongs to a larger or equal-sized cluster"
                        lcn = s(b(j,2))
                        oldcn = s(b(j,1))
                        lcs = c(s(b(j,2)))
                        b(j,3) = lcn
                        clsum = lcs+c(oldcn)+1
                        do k=1,t
                           if (s(k).eq.oldcn) then
                              s(k) = lcn
                            write(6,*) "Site", k, " is now in cluster"
     &                      , lcn
                            write(12,*) "Site", k, " is now in cluster"
     &                      , lcn
                           end if
                        end do
                        do k=1,nb
                           if (b(k,3).eq.oldcn) then
                              b(k,3) = lcn
                            write(6,*) "Bond", b(k,1), b(k,2),
     &                      " is now in cluster", lcn
                            write(12,*) "Bond", b(k,1), b(k,2),
     &                      " is now in cluster", lcn
                           end if
                        end do
                        c(oldcn) = 0
                        c(s(b(j,2))) = clsum
                       write(6,*) "Bond added to cluster", lcn
                       write(12,*) "Bond added to cluster", lcn
                       write(6,*) "Cluster", lcn, " is now size",
     &                 c(s(b(j,2)))
                       write(12,*) "Cluster", lcn, " is now size",
     &                 c(s(b(j,2)))
                       write(6,*) "Cluster", oldcn, " is now size",
     &                 c(oldcn)
                       write(12,*) "Cluster", oldcn, " is now size",
     &                 c(oldcn)
                        goto 310
                     end if
                  end if
               end if
            end do
C     update the largest overall cluster number and size variables
310         if (c(lcn).gt.maxcs) then
               maxcs = c(lcn)
               maxcn = lcn
            end if
            write(6,*) "--------------------"
            write(12,*) "--------------------"
         end do

         f = real(tbonds)/real(nb)

         write(6,*) "Actual fraction of bonds filled:", f
         write(12,*) "Actual fraction of bonds filled:", f
C     ==================================================================

         write(6,*)
         write(6,*) "******************************"
         write(12,*)
         write(12,*) "******************************"

C     output the largest cluster number and size

         write(6,*) "largest overall cluster number:", maxcn
         write(6,*) "largest overall cluster size:", maxcs
         write(12,*) "largest overall cluster number:", maxcn
         write(12,*) "largest overall cluster size:", maxcs

C     ==================================================================
C     check for percolation, i.e. presence of lattice spanning cluster
C     ==================================================================
         do i = 1,(cln-1)
            botfill = 0           !used for checking if the bottom row contains a site
            topfill = 0           !used for checking if the top row contains a site
            if (c(i).ge.(2*n-1)) then   !only clusters with size 2n-1 could span the lattice
               write(6,*) "testing cluster", i   !useful debugging message
               write(12,*) "testing cluster", i
               do j = 1,m
                  if (s(j).eq.i) then
                     botfill = 1
                     goto 410
                  end if
               end do
               write(6,*) "source end not connected"
               write(12,*) "source end not connected"
               goto 430
410            do j = (t-m+1),t
                  if (s(j).eq.i) then
                     topfill = 1
                     goto 420
                  end if
               end do
               write(6,*) "drain end not connected"
               write(12,*) "drain end not connected"
420            if ((topfill+botfill).eq.2) then
                  write(6,*) "infinite cluster present"
                  write(12,*) "infinite cluster present"
                  perccln = i     !infinite cluster number
                  perccls = c(i)  !infinite cluster size
                  write(6,*) "infinite cluster number:", perccln
                  write(12,*) "infinite cluster number:", perccln
                  write(6,*) "infinite cluster size:", perccls
                  write(12,*) "infinite cluster size:", perccls
                  goto 440
               end if
430         end if
         end do

         write(6,*) "no infinite cluster present"
         write(12,*) "no infinite cluster present"
C     ==================================================================

440      write(6,*) "******************************"
         write(12,*) "******************************"

C     output the contents of the site, bond, and cluster arrays

         do i=1,t
            write(10,111) i, s(i), c(i)
         end do

         do i=1,nb
            write(11,111) b(i,1), b(i,2), b(i,3)
         end do

111      format(i10,",",i10,",",i10)

         stop
      end

C     ==================================================================
C     nearest neighbor subroutine that should populate the the nearest
C     neighbor array with the site numbers of the nearest neighbors for
C     a particular site - needs to be changed for different lattice
C     geometry
C     ==================================================================

      subroutine nearestn(rn)

      implicit none
      integer rn, m, n, t, pbc, scn
      integer z
      integer nn(10)
      common m, n, t, pbc, nn, scn

C     zero out the nearest neighbor array

         do z = 1,scn
            nn(z) = 0
         end do

C     check: lower-left corner site
            if (rn.eq.1) then
               nn(1) = rn+1
               nn(2) = rn+m
               if (pbc.eq.1) then
                  nn(3) = m
               end if
               goto 210
            end if

C     check: lower-right corner site
            if (rn.eq.m) then
               nn(1) = rn-1
               nn(2) = rn+m
               if (pbc.eq.1) then
                  nn(3) = 1
               end if
               goto 210
            end if

C     check: upper-left corner site
            if (rn.eq.(t-(m-1))) then
               nn(1) = rn-m
               nn(2) = rn+1
               if (pbc.eq.1) then
                  nn(3) = t
               end if
               goto 210
            end if

C     check: upper-right corner site
            if (rn.eq.t) then
               nn(1) = rn-m
               nn(2) = rn-1
               if (pbc.eq.1) then
                  nn(3) = rn-(m-1)
               end if
               goto 210
            end if

C     check: bottom row site (i.e. source edge)
            if (rn.lt.m) then
               nn(1) = rn-1
               nn(2) = rn+1
               nn(3) = rn+m
               goto 210
            end if

C     check: top row site (i.e. drain edge)
            if (rn.gt.(t-m)) then
               nn(1) = rn-m
               nn(2) = rn-1
               nn(3) = rn+1
               goto 210
            end if

C     check: left edge site
            if (mod((rn-1),m).eq.0) then
               nn(1) = rn-m
               nn(2) = rn+1
               nn(3) = rn+m
               if (pbc.eq.1) then
                  nn(4) = rn+(m-1)
               end if
               goto 210
            end if

C     check: right edge site
            if (mod(rn,m).eq.0) then
               nn(1) = rn-m
               nn(2) = rn-1
               nn(3) = rn+m
               if (pbc.eq.1) then
                  nn(4) = rn-(m-1)
               end if
               goto 210
            end if

C     general interior site
            nn(1) = rn-m
            nn(2) = rn-1
            nn(3) = rn+1
            nn(4) = rn+m

210      end subroutine
C     ==================================================================
